y = "Total Fragment Length")
# Plot average fragment lengths by population
ggplot(avg_length_population, aes(x = reorder(pop, -AverageLength), y = AverageLength)) +
geom_bar(stat = "identity", fill = "lightgreen") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
labs(title = "Average Archaic Fragment Length by Population",
x = "Population",
y = "Average Fragment Length")
mean_seg_pop <- archaic_df %>%
group_by(pop, region) %>%
summarise(`Mean segment length` = mean(length))
ggplot(mean_seg_pop, aes(x = pop, y = `Mean segment length`, fill = region)) +
geom_bar(position = "dodge", stat="identity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1), text = element_text(size=20))
mean_seg_pop <- archaic_df %>%
group_by(pop, region) %>%
summarise(`Mean segment length` = mean(length))
ggplot(mean_seg_pop, aes(x = pop, y = `Mean segment length`, fill = region)) +
geom_bar(position = "dodge", stat="identity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1), text = element_text(size=20))
options(repr.plot.width=30, repr.plot.height=10)
mean_seg_pop <- archaic_df %>%
group_by(pop, region) %>%
summarise(`Mean segment length` = mean(length))
mean_seg_pop %>%
ungroup() %>%
arrange(region) %>%
mutate(pop = factor(pop, pop)) %>%
ggplot(aes(x = pop, y = `Mean segment length`, fill = region)) +
geom_bar(position = "dodge", stat="identity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),text = element_text(size=20))
options(repr.plot.width=30, repr.plot.height=10)
mean_seg_pop <- archaic_df %>%
group_by(pop, region) %>%
summarise(`Mean segment length` = mean(length))
mean_seg_pop %>%
ungroup() %>%
arrange(region) %>%
mutate(pop = factor(pop, pop)) %>%
ggplot(aes(x = pop, y = `Mean segment length`, fill = region)) +
geom_bar(position = "dodge", stat="identity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),text = element_text(size=10))
options(repr.plot.width=30, repr.plot.height=10)
mean_seg_pop <- archaic_df %>%
group_by(pop, region) %>%
summarise(`Mean segment length` = mean(length))
mean_seg_pop %>%
ungroup() %>%
arrange(region) %>%
mutate(pop = factor(pop, pop)) %>%
ggplot(aes(x = pop, y = `Mean segment length`, fill = region)) +
geom_bar(position = "dodge", stat="identity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),text = element_text(size=5))
options(repr.plot.width=50, repr.plot.height=10)
mean_seg_pop <- archaic_df %>%
group_by(pop, region) %>%
summarise(`Mean segment length` = mean(length))
mean_seg_pop %>%
ungroup() %>%
arrange(region) %>%
mutate(pop = factor(pop, pop)) %>%
ggplot(aes(x = pop, y = `Mean segment length`, fill = region)) +
geom_bar(position = "dodge", stat="identity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),text = element_text(size=5))
options(repr.plot.width=100, repr.plot.height=10)
mean_seg_pop <- archaic_df %>%
group_by(pop, region) %>%
summarise(`Mean segment length` = mean(length))
mean_seg_pop %>%
ungroup() %>%
arrange(region) %>%
mutate(pop = factor(pop, pop)) %>%
ggplot(aes(x = pop, y = `Mean segment length`, fill = region)) +
geom_bar(position = "dodge", stat="identity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),text = element_text(size=5))
options(repr.plot.width=150, repr.plot.height=10)
mean_seg_pop <- archaic_df %>%
group_by(pop, region) %>%
summarise(`Mean segment length` = mean(length))
mean_seg_pop %>%
ungroup() %>%
arrange(region) %>%
mutate(pop = factor(pop, pop)) %>%
ggplot(aes(x = pop, y = `Mean segment length`, fill = region)) +
geom_bar(position = "dodge", stat="identity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),text = element_text(size=5))
options(repr.plot.width=150, repr.plot.height=10)
mean_seg_pop <- archaic_df %>%
group_by(pop, region) %>%
summarise(`Mean segment length` = mean(length))
mean_seg_pop %>%
ungroup() %>%
arrange(region) %>%
mutate(pop = factor(pop, pop)) %>%
ggplot(aes(x = pop, y = `Mean segment length`, fill = region)) +
geom_bar(position = "dodge", stat="identity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),text = element_text(size=10))
options(repr.plot.width=150, repr.plot.height=10)
mean_seg_pop <- archaic_df %>%
group_by(pop, region) %>%
summarise(`Mean segment length` = mean(length))
mean_seg_pop %>%
ungroup() %>%
arrange(region) %>%
mutate(pop = factor(pop, pop)) %>%
ggplot(aes(x = pop, y = `Mean segment length`, fill = region)) +
geom_bar(position = "dodge", stat="identity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),text = element_text(size=7))
# Calculate the mean segment length by region
mean_seg_region <- archaic_df %>%
group_by(region) %>%
summarise(`Mean segment length` = mean(length))
# Plot the average segment length by region
ggplot(mean_seg_region, aes(x = region, y = `Mean segment length`, fill = region)) +
geom_bar(position = "dodge", stat="identity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1), text = element_text(size=20)) +
labs(title = "Mean Segment Length by Region", x = "Region", y = "Mean Segment Length")
# Calculate total archaic fragment lengths per population
total_length_population <- archaic_df %>%
group_by(pop) %>%
summarise(TotalLength = sum(length)) %>%
arrange(desc(TotalLength))
# View the top populations by total fragment length
head(total_length_population)
# Calculate total archaic fragment lengths per individual
total_length_individual <- archaic_df %>%
group_by(name) %>%
summarise(TotalLength = sum(length)) %>%
arrange(desc(TotalLength))
# View the results
head(total_length_individual)
View(avg_length_population)
# Calculate the average fragment length by population
avg_length_region <- archaic_df %>%
group_by(region) %>%
summarise(AverageLength = mean(length)) %>%
arrange(desc(AverageLength))
# Calculate the average fragment length by population
avg_length_population <- archaic_df %>%
group_by(pop) %>%
summarise(AverageLength = mean(length)) %>%
arrange(desc(AverageLength))
# Find the population with the longest fragment reads
longest_reads_population <- avg_length_population[1, ]
longest_reads_population
View(avg_length_region)
# Calculate the mean segment length by region
mean_seg_region <- archaic_df %>%
group_by(region) %>%
summarise(`Mean segment length` = mean(length))
# Plot the average segment length by region
ggplot(mean_seg_region, aes(x = region, y = `Mean segment length`, fill = region)) +
geom_bar(position = "dodge", stat="identity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1), text = element_text(size=20)) +
labs(title = "Mean Segment Length by Region", x = "Region", y = "Mean Segment Length")
# Plotting the length distribution for each region using facet_grid
ggplot(archaic_df, aes(x = length, fill = region)) +
geom_histogram(bins = 50, alpha = 0.7) +
facet_grid(. ~ region) +
theme_minimal() +
labs(title = "Length Distribution of Archaic Fragments by Region",
x = "Fragment Length",
y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
str(archaic_df)
head(archaic_df)
# Assign archaic origin based on the highest SNP count
archaic_df <- archaic_df %>%
mutate(archaic_origin = case_when(
Shared_with_Denisova > Shared_with_Altai & Shared_with_Denisova > Shared_with_Vindija ~ "Denisovan",
Shared_with_Altai > Shared_with_Denisova & Shared_with_Altai > Shared_with_Vindija ~ "Neanderthal",
Shared_with_Vindija > Shared_with_Denisova & Shared_with_Vindija > Shared_with_Altai ~ "Neanderthal",
TRUE ~ "Unassigned"
))
# Calculate total archaic sequence length by individual and archaic origin
mean_length_individual <- archaic_df %>%
group_by(name, pop, archaic_origin) %>%
summarise(TotalLengthMb = sum(length) / 1e6) %>%
ungroup()
# Aggregate to get mean length per population and archaic origin
mean_length_plot <- mean_length_individual %>%
group_by(pop, archaic_origin) %>%
summarise(MeanLengthMb = mean(TotalLengthMb)) %>%
ungroup()
library(ggplot2)
# Plot with mean detected archaic sequence per individual by origin
ggplot(mean_length_plot, aes(x = reorder(pop, MeanLengthMb), y = MeanLengthMb, fill = archaic_origin)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
theme_minimal() +
labs(title = "Mean Detected Archaic Sequence per Individual",
x = "",
y = "Mean detected archaic sequence per individual (Mb)",
fill = "Archaic Origin") +
scale_fill_manual(values = c("Neanderthal" = "lightgreen",
"Denisovan" = "orange",
"Unassigned" = "lightblue")) +
theme(text = element_text(size = 12))
View(avg_length_population)
# Assign archaic origin based on the highest SNP count
archaic_df <- archaic_df %>%
mutate(archaic_origin = case_when(
Shared_with_Denisova > Shared_with_Altai & Shared_with_Denisova > Shared_with_Vindija ~ "Denisovan",
Shared_with_Altai > Shared_with_Denisova & Shared_with_Altai > Shared_with_Vindija ~ "Neanderthal",
Shared_with_Vindija > Shared_with_Denisova & Shared_with_Vindija > Shared_with_Altai ~ "Neanderthal",
TRUE ~ "Unassigned"
))
# Calculate total archaic sequence length by individual and archaic origin
mean_length_individual <- archaic_df %>%
group_by(name, pop, archaic_origin) %>%
summarise(TotalLengthMb = sum(length) / 1e6) %>%
ungroup()
# Aggregate to get mean length per population and archaic origin
mean_length_plot <- mean_length_individual %>%
group_by(pop, archaic_origin) %>%
summarise(MeanLengthMb = mean(TotalLengthMb)) %>%
ungroup()
# Make the plot taller and improve readability of the y-axis
ggplot(mean_length_plot, aes(x = MeanLengthMb, y = reorder(pop, MeanLengthMb), fill = archaic_origin)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
labs(title = "Mean Detected Archaic Sequence per Individual",
x = "Mean detected archaic sequence per individual (Mb)",
y = "",
fill = "Archaic Origin") +
scale_fill_manual(values = c("Neanderthal" = "lightgreen",
"Denisovan" = "orange",
"Unassigned" = "lightblue")) +
theme(
text = element_text(size = 10),  # Smaller text size
axis.text.y = element_text(size = 8),  # Smaller y-axis labels
plot.title = element_text(size = 14, face = "bold"),
plot.margin = margin(10, 10, 10, 10)
) +
coord_flip() +
guides(fill = guide_legend(title = "Archaic Origin")) +
theme(plot.title = element_text(hjust = 0.5))
# Assign archaic origin based on the highest SNP count
archaic_df <- archaic_df %>%
mutate(archaic_origin = case_when(
Shared_with_Denisova > Shared_with_Altai & Shared_with_Denisova > Shared_with_Vindija ~ "Denisovan",
Shared_with_Altai > Shared_with_Denisova & Shared_with_Altai > Shared_with_Vindija ~ "Neanderthal",
Shared_with_Vindija > Shared_with_Denisova & Shared_with_Vindija > Shared_with_Altai ~ "Neanderthal",
TRUE ~ "Unassigned"
))
# Calculate total archaic sequence length by individual and archaic origin
mean_length_individual <- archaic_df %>%
group_by(name, pop, archaic_origin) %>%
summarise(TotalLengthMb = sum(length) / 1e6) %>%
ungroup()
# Aggregate to get mean length per population and archaic origin
mean_length_plot <- mean_length_individual %>%
group_by(pop, archaic_origin) %>%
summarise(MeanLengthMb = mean(TotalLengthMb)) %>%
ungroup()
library(ggplot2)
# Plot with mean detected archaic sequence per individual by origin
ggplot(mean_length_plot, aes(x = reorder(pop, MeanLengthMb), y = MeanLengthMb, fill = archaic_origin)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
theme_minimal() +
labs(title = "Mean Detected Archaic Sequence per Individual",
x = "",
y = "Mean detected archaic sequence per individual (Mb)",
fill = "Archaic Origin") +
scale_fill_manual(values = c("Neanderthal" = "lightgreen",
"Denisovan" = "orange",
"Unassigned" = "lightblue")) +
theme(text = element_text(size = 12))
# Assign archaic origin based on the highest SNP count
archaic_df <- archaic_df %>%
mutate(archaic_origin = case_when(
Shared_with_Denisova > Shared_with_Altai & Shared_with_Denisova > Shared_with_Vindija ~ "Denisovan",
Shared_with_Altai > Shared_with_Denisova & Shared_with_Altai > Shared_with_Vindija ~ "Neanderthal",
Shared_with_Vindija > Shared_with_Denisova & Shared_with_Vindija > Shared_with_Altai ~ "Neanderthal",
TRUE ~ "Unassigned"
))
# Calculate total archaic sequence length by individual and archaic origin
mean_length_individual <- archaic_df %>%
group_by(name, pop, archaic_origin) %>%
summarise(TotalLengthMb = sum(length) / 1e6) %>%
ungroup()
# Aggregate to get mean length per population and archaic origin
mean_length_plot <- mean_length_individual %>%
group_by(pop, archaic_origin) %>%
summarise(MeanLengthMb = mean(TotalLengthMb)) %>%
ungroup()
library(ggplot2)
# Plot with mean detected archaic sequence per individual by origin
ggplot(mean_length_plot, aes(x = reorder(pop, MeanLengthMb), y = MeanLengthMb, fill = archaic_origin)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
theme_minimal() +
labs(title = "Mean Detected Archaic Sequence per Individual",
x = "",
y = "Mean detected archaic sequence per individual (Mb)",
fill = "Archaic Origin") +
scale_fill_manual(values = c("Neanderthal" = "lightgreen",
"Denisovan" = "orange",
"Unassigned" = "lightblue")) +
theme(text = element_text(size = 7))
# Assign archaic origin based on the highest SNP count
archaic_df <- archaic_df %>%
mutate(archaic_origin = case_when(
Shared_with_Denisova > Shared_with_Altai & Shared_with_Denisova > Shared_with_Vindija ~ "Denisovan",
Shared_with_Altai > Shared_with_Denisova & Shared_with_Altai > Shared_with_Vindija ~ "Neanderthal",
Shared_with_Vindija > Shared_with_Denisova & Shared_with_Vindija > Shared_with_Altai ~ "Neanderthal",
TRUE ~ "Unassigned"
))
# Calculate total archaic sequence length by individual and archaic origin
mean_length_individual <- archaic_df %>%
group_by(name, pop, archaic_origin) %>%
summarise(TotalLengthMb = sum(length) / 1e6) %>%
ungroup()
# Aggregate to get mean length per population and archaic origin
mean_length_plot <- mean_length_individual %>%
group_by(pop, archaic_origin) %>%
summarise(MeanLengthMb = mean(TotalLengthMb)) %>%
ungroup()
# Increase plot height and adjust text size for better readability
ggplot(mean_length_plot, aes(x = reorder(pop, MeanLengthMb), y = MeanLengthMb, fill = archaic_origin)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
labs(title = "Mean Detected Archaic Sequence per Individual",
x = "",
y = "Mean detected archaic sequence per individual (Mb)",
fill = "Archaic Origin") +
scale_fill_manual(values = c("Neanderthal" = "lightgreen",
"Denisovan" = "orange",
"Unassigned" = "lightblue")) +
theme(
text = element_text(size = 12),
axis.text.x = element_text(angle = 45, hjust = 1, size = 8), # Tilt x-axis labels
axis.text.y = element_text(size = 10) # Reduce y-axis label size
) +
theme(plot.margin = margin(10, 10, 10, 10))
# Assign archaic origin based on the highest SNP count
archaic_df <- archaic_df %>%
mutate(archaic_origin = case_when(
Shared_with_Denisova > Shared_with_Altai & Shared_with_Denisova > Shared_with_Vindija ~ "Denisovan",
Shared_with_Altai > Shared_with_Denisova & Shared_with_Altai > Shared_with_Vindija ~ "Neanderthal",
Shared_with_Vindija > Shared_with_Denisova & Shared_with_Vindija > Shared_with_Altai ~ "Neanderthal",
TRUE ~ "Unassigned"
))
# Calculate total archaic sequence length by individual and archaic origin
mean_length_individual <- archaic_df %>%
group_by(name, pop, archaic_origin) %>%
summarise(TotalLengthMb = sum(length) / 1e6) %>%
ungroup()
# Aggregate to get mean length per population and archaic origin
mean_length_plot <- mean_length_individual %>%
group_by(pop, archaic_origin) %>%
summarise(MeanLengthMb = mean(TotalLengthMb)) %>%
ungroup()
library(ggplot2)
# Plot with mean detected archaic sequence per individual by origin
ggplot(mean_length_plot, aes(x = reorder(pop, MeanLengthMb), y = MeanLengthMb, fill = archaic_origin)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
theme_minimal() +
labs(title = "Mean Detected Archaic Sequence per Individual",
x = "",
y = "Mean detected archaic sequence per individual (Mb)",
fill = "Archaic Origin") +
scale_fill_manual(values = c("Neanderthal" = "lightgreen",
"Denisovan" = "orange",
"Unassigned" = "lightblue")) +
theme(text = element_text(size = 7))
# Assign archaic origin based on the highest SNP count
archaic_df <- archaic_df %>%
mutate(archaic_origin = case_when(
Shared_with_Denisova > Shared_with_Altai & Shared_with_Denisova > Shared_with_Vindija ~ "Denisovan",
Shared_with_Altai > Shared_with_Denisova & Shared_with_Altai > Shared_with_Vindija ~ "Neanderthal",
Shared_with_Vindija > Shared_with_Denisova & Shared_with_Vindija > Shared_with_Altai ~ "Neanderthal",
TRUE ~ "Unassigned"
))
# Calculate total archaic sequence length by individual and archaic origin
mean_length_individual <- archaic_df %>%
group_by(name, pop, archaic_origin) %>%
summarise(TotalLengthMb = sum(length) / 1e6) %>%
ungroup()
# Aggregate to get mean length per population and archaic origin
mean_length_plot <- mean_length_individual %>%
group_by(pop, archaic_origin) %>%
summarise(MeanLengthMb = mean(TotalLengthMb)) %>%
ungroup()
library(ggplot2)
# Plot with mean detected archaic sequence per individual by origin
ggplot(mean_length_plot, aes(x = reorder(pop, MeanLengthMb), y = MeanLengthMb, fill = archaic_origin)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
theme_minimal() +
labs(title = "Mean Detected Archaic Sequence per Individual",
x = "",
y = "Mean detected archaic sequence per individual (Mb)",
fill = "Archaic Origin") +
scale_fill_manual(values = c("Neanderthal" = "lightgreen",
"Denisovan" = "orange",
"Unassigned" = "lightblue")) +
theme(text = element_text(size = 10))
# Summarize by region, calculating the average total length (in Mb)
avg_length_region <- mean_length_individual %>%
group_by(region, archaic_origin) %>%
summarise(MeanLengthMb = mean(MeanLengthMb)) %>%
ungroup()
# Ensure the region is included in the summarization and compute the mean length by region
avg_length_region <- archaic_df %>%
group_by(region, archaic_origin) %>%
summarise(MeanLengthMb = mean(length) / 1e6) %>%  # Convert to Mb
ungroup()
# Plotting the average length per region
ggplot(avg_length_region, aes(x = reorder(region, MeanLengthMb), y = MeanLengthMb, fill = archaic_origin)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
labs(title = "Average Detected Archaic Sequence per Region",
x = "Region",
y = "Average detected archaic sequence per region (Mb)",
fill = "Archaic Origin") +
scale_fill_manual(values = c("Neanderthal" = "lightgreen",
"Denisovan" = "orange",
"Unassigned" = "lightblue")) +
theme(
text = element_text(size = 12),
axis.text.x = element_text(angle = 45, hjust = 1)
)
# Ensure the region is included in the summarization and compute the mean length by region
avg_length_region <- archaic_df %>%
group_by(region, archaic_origin) %>%
summarise(MeanLengthMb = mean(length) / 1e6) %>%  # Convert to Mb
ungroup()
# Plotting the average length per region with region on the y-axis and average sequence length on the x-axis
ggplot(avg_length_region, aes(x = MeanLengthMb, y = reorder(region, MeanLengthMb), fill = archaic_origin)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
labs(title = "Average Detected Archaic Sequence per Region",
x = "Average detected archaic sequence per region (Mb)",
y = "Region",
fill = "Archaic Origin") +
scale_fill_manual(values = c("Neanderthal" = "lightgreen",
"Denisovan" = "orange",
"Unassigned" = "lightblue")) +
theme(
text = element_text(size = 12),
axis.text.y = element_text(size = 10),  # Ensure y-axis labels are readable
plot.margin = margin(10, 10, 10, 10)    # Add some margin to avoid clipping
)
# Assign archaic origin based on the highest SNP count
archaic_df <- archaic_df %>%
mutate(archaic_origin = case_when(
Shared_with_Denisova > Shared_with_Altai & Shared_with_Denisova > Shared_with_Vindija ~ "Denisovan",
Shared_with_Altai > Shared_with_Denisova & Shared_with_Altai > Shared_with_Vindija ~ "Neanderthal",
Shared_with_Vindija > Shared_with_Denisova & Shared_with_Vindija > Shared_with_Altai ~ "Neanderthal",
TRUE ~ "Unassigned"
))
# Calculate total archaic sequence length by individual and archaic origin
mean_length_individual <- archaic_df %>%
group_by(name, pop, archaic_origin) %>%
summarise(TotalLengthMb = sum(length) / 1e6) %>%
ungroup()
# Aggregate to get mean length per population and archaic origin
mean_length_plot <- mean_length_individual %>%
group_by(pop, archaic_origin) %>%
summarise(MeanLengthMb = mean(TotalLengthMb)) %>%
ungroup()
library(ggplot2)
# Plot with mean detected archaic sequence per individual by origin
ggplot(mean_length_plot, aes(x = reorder(pop, MeanLengthMb), y = MeanLengthMb, fill = archaic_origin)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
theme_minimal() +
labs(title = "Mean Detected Archaic Sequence per Individual",
x = "",
y = "Mean detected archaic sequence per individual (Mb)",
fill = "Archaic Origin") +
scale_fill_manual(values = c("Neanderthal" = "lightgreen",
"Denisovan" = "orange",
"Unassigned" = "lightblue")) +
theme(text = element_text(size = 10))
# Ensure the region is included in the summarization and compute the mean length by region
avg_length_region <- archaic_df %>%
group_by(region, archaic_origin) %>%
summarise(MeanLengthMb = mean(length) / 1e6) %>%  # Convert to Mb
ungroup()
# Plotting the average length per region with region on the y-axis and average sequence length on the x-axis
ggplot(avg_length_region, aes(x = MeanLengthMb, y = reorder(region, MeanLengthMb), fill = archaic_origin)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
labs(title = "Average Detected Archaic Sequence per Region",
x = "Average detected archaic sequence per region (Mb)",
y = "Region",
fill = "Archaic Origin") +
scale_fill_manual(values = c("Neanderthal" = "lightgreen",
"Denisovan" = "orange",
"Unassigned" = "lightblue")) +
theme(
text = element_text(size = 12),
axis.text.y = element_text(size = 10),  # Ensure y-axis labels are readable
plot.margin = margin(10, 10, 10, 10)    # Add some margin to avoid clipping
)
